apiVersion: ray.io/v1
kind: RayService
metadata:
  name: "${{values.name}}"
  namespace: "${{values.namespace}}"
spec:
  deploymentUnhealthySecondThreshold: 300
  rayClusterConfig:
    headGroupSpec:
      headService:
        metadata:
          name: "${{values.name}}"
          namespace: "${{values.namespace}}"
      rayStartParams:
        dashboard-host: 0.0.0.0
      template:
        spec:
          containers:
            - env:
                - name: RAY_GRAFANA_HOST
                  value: http://prometheus-grafana.monitoring.svc.cluster.local
                - name: RAY_PROMETHEUS_HOST
                  value: >-
                    http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090
                - name: RAY_GRAFANA_IFRAME_HOST
                  value: https://grafana.arcadeai.site
              image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama2:latest
              imagePullPolicy: IfNotPresent
              lifecycle:
                preStop:
                  exec:
                    command:
                      - /bin/sh
                      - '-c'
                      - ray stop
              name: ray-head
              ports:
                - containerPort: 6379
                  name: gcs
                  protocol: TCP
                - containerPort: 8265
                  name: dashboard
                  protocol: TCP
                - containerPort: 10001
                  name: client
                  protocol: TCP
                - containerPort: 8000
                  name: serve
                  protocol: TCP
              resources:
                limits:
                  cpu: '1'
                  memory: 6G
                requests:
                  cpu: '1'
                  memory: 6G
              volumeMounts:
                - mountPath: /tmp/ray
                  name: ray-logs
          volumes:
            - emptyDir: {}
              name: ray-logs
    rayVersion: 2.7.1
    workerGroupSpecs:
      - groupName: inf2-worker-group
        maxReplicas: "${{values.max_replicas}}"
        minReplicas: "${{values.min_replicas}}"
        numOfHosts: 1
        rayStartParams: {}
        replicas: "${{values.starting_replicas}}"
        template:
          spec:
            containers:
              - image: public.ecr.aws/data-on-eks/ray-serve-inf2-llama2:latest
                imagePullPolicy: IfNotPresent
                lifecycle:
                  preStop:
                    exec:
                      command:
                        - /bin/sh
                        - '-c'
                        - ray stop
                name: ray-worker
                resources:
                  limits:
                    aws.amazon.com/neuron: '12'
                    cpu: '180'
                    memory: 700G
                  requests:
                    aws.amazon.com/neuron: '12'
                    cpu: '180'
                    memory: 700G
            tolerations:
              - effect: NoSchedule
                key: aws.amazon.com/neuron
                operator: Exists
  serveConfigV2: |
    applications:
      - name: llama2
        import_path: ray_serve_llama2:entrypoint # Specify the correct path to your Python script
        runtimeEnv: 
          env_vars: {"MODEL_ID": "NousResearch/Llama-2-13b-chat-hf"}  # Replace with the appropriate model ID
  serviceUnhealthySecondThreshold: 900

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "${{values.name}}"
  namespace: "${{values.namespace}}"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "${{values.namespace}}-${{values.name}}.arcadeai.site"
      secretName: "${{values.name}}-cert"
  rules:
    - host: "${{values.namespace}}-${{values.name}}.arcadeai.site"
      http:
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: "${{values.name}}"
                port:
                  number: 8265
          - path: /serve/(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: "${{values.namespace}}"
                port:
                  number: 8000
